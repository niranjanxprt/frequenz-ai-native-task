[tool.poetry]
name = "frequenz-ai-native-task"
version = "0.1.0"
description = "AI-Native knowledge graph: extract, query, and visualize knowledge from the Frequenz SDK using semantic web principles and JSON-LD"
authors = ["Frequenz AI-Native Task <noreply@frequenz.com>"]
readme = "README.md"
homepage = "https://github.com/frequenz-floss/frequenz-sdk-python"
repository = "https://github.com/frequenz-floss/frequenz-sdk-python"
documentation = "https://frequenz-floss.github.io/frequenz-sdk-python/"
keywords = ["knowledge-graph", "json-ld", "semantic-search", "ai", "frequenz", "hiring-task"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
# No packages - using standalone scripts for hiring task

[tool.poetry.dependencies]
python = ">=3.9,<3.13"

# Core dependencies for extraction and processing
requests = "^2.32.0"
beautifulsoup4 = "^4.13.0"
markdown-it-py = "^3.0.0"
lxml = "^5.3.0"

# Semantic search (TF-IDF and similarity calculations) - KEEPING scikit-learn
scikit-learn = "^1.7.0"
numpy = "^2.2.0"

# Data processing
pandas = "^2.3.0"

# Visualization dependencies
networkx = "^3.4.0"
pyvis = "^0.3.2"
plotly = "^6.3.0"

# Web app dependencies
streamlit = "^1.45.0"
streamlit-agraph = "^0.0.45"
altair = "^5.5.0"

# Repository analysis for advanced query
gitingest = "^0.1.0"
python-dotenv = "^1.1.0"

# API and HTTP dependencies
httpx = "^0.28.0"

# Utility dependencies
toml = "^0.10.2"
typing-extensions = "^4.14.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.0.0"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"

# Linting and formatting
ruff = "^0.9.0"
black = "^24.0.0"
isort = "^5.13.0"
mypy = "^1.8.0"

# Git hooks
pre-commit = "^3.6.0"

[tool.poetry.scripts]
# Main CLI tools for hiring task
extract = "extract:main"
query = "query:main" 
query-advanced = "query_advanced:main"
visualize = "visualize:main"
# Additional utilities
test-queries = "test_queries:main"
run-tests = "scripts/run_tests:main"

[build-system]
requires = ["poetry-core>=1.8.0"]
build-backend = "poetry.core.masonry.api"

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9+
target-version = "py39"

exclude = [
    ".git",
    ".venv", 
    "__pycache__",
    "temp/",
    "data/",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E4", "E7", "E9", "F", "W291", "W292", "W293"]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "E203",  # Whitespace before ':' (conflicts with black)
]
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "pyvis.*",
    "networkx.*",
    "plotly.*",
    "altair.*",
    "gitingest.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "pass",
]
