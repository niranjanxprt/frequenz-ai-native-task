[tool.poetry]
name = "frequenz-ai-native-task"
version = "0.1.0"
description = "AI-Native knowledge graph: extract, query, and visualize knowledge from the Frequenz SDK using semantic web principles and JSON-LD"
authors = ["Frequenz AI-Native Task <noreply@frequenz.com>"]
readme = "README.md"
homepage = "https://github.com/frequenz-floss/frequenz-sdk-python"
repository = "https://github.com/frequenz-floss/frequenz-sdk-python"
documentation = "https://frequenz-floss.github.io/frequenz-sdk-python/"
keywords = ["knowledge-graph", "json-ld", "semantic-search", "ai", "frequenz", "hiring-task"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
# No packages - using standalone scripts for hiring task

[tool.poetry.dependencies]
python = ">=3.9,<3.13"
# Core dependencies for extraction and processing
requests = ">=2.31.0"
beautifulsoup4 = ">=4.12.2"
markdown-it-py = ">=3.0.0"
# Semantic search and ML dependencies
scikit-learn = ">=1.3.0"
# Visualization dependencies
networkx = ">=3.0"
graphviz = ">=0.20.1"
pyvis = ">=0.3.2"
# Web app dependencies (optional but included for demo)
streamlit = ">=1.33.0"
# Repository analysis for advanced query
gitingest = ">=0.1.0"

[tool.poetry.group.dev.dependencies]
# Linting and formatting
ruff = "^0.1.0"
# Optional advanced ML dependencies
sentence-transformers = {version = ">=2.2.0", optional = true}
torch = {version = ">=2.0.0", optional = true}

[tool.poetry.extras]
advanced = ["sentence-transformers", "torch"]
all = ["sentence-transformers", "torch"]

[tool.poetry.scripts]
# Main CLI tools for hiring task
extract = "extract:main"
query = "query:main" 
query-advanced = "query_advanced:main"
visualize = "visualize:main"
# Additional utilities
test-queries = "test_queries:main"
run-tests = "scripts/run_tests:main"

[build-system]
requires = ["poetry-core>=1.8.0"]
build-backend = "poetry.core.masonry.api"

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9+
target-version = "py39"

exclude = [
    ".git",
    ".venv", 
    "__pycache__",
    "temp/",
    "data/",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E4", "E7", "E9", "F", "W291", "W292", "W293"]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "E203",  # Whitespace before ':' (conflicts with black)
]
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
