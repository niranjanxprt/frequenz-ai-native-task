{
  "@context": {
    "@vocab": "https://schema.org/",
    "fre": "https://frequenz.com/ontology#"
  },
  "@type": "SoftwareApplication",
  "name": "Frequenz SDK for Python",
  "applicationCategory": "Energy management / Microgrid orchestration",
  "description": "A development kit to interact with the Frequenz development platform.",
  "programmingLanguage": "Python",
  "codeRepository": "https://github.com/frequenz-floss/frequenz-sdk-python",
  "author": {
    "@type": "Organization",
    "name": "Frequenz"
  },
  "license": "https://opensource.org/licenses/MIT",
  "softwareRequirements": [
    "Python 3.11",
    "Python 3.12"
  ],
  "installInstructions": {
    "@type": "HowTo",
    "name": "Install the Frequenz SDK for Python",
    "step": [
      {
        "@type": "HowToStep",
        "text": "pip install frequenz-sdk"
      }
    ]
  },
  "featureList": [
    "Actor-model based orchestration with frequenz.channels",
    "Component pools for batteries, PV, and EV chargers",
    "Time-series streaming and resampling utilities",
    "gRPC-based microgrid connectivity and sandbox support"
  ],
  "exampleOfWork": [
    {
      "@type": "SoftwareSourceCode",
      "programmingLanguage": "Python",
      "codeSampleType": "example",
      "text": "import asyncio\nfrom datetime import timedelta\nfrom frequenz.sdk import microgrid\nfrom frequenz.sdk.actor import ResamplerConfig\n\nasync def run() -> None:\n    server_url = \"grpc://microgrid.sandbox.api.frequenz.io:62060\"\n    await microgrid.initialize(\n        server_url,\n        ResamplerConfig(resampling_period=timedelta(seconds=1)),\n    )\n    grid_power_rx = microgrid.grid().power.new_receiver()\n    async for point in grid_power_rx:\n        print(point.value)\n\nif __name__ == \"__main__\":\n    asyncio.run(run())"
    }
  ],
  "subjectOf": [
    {
      "@type": "Question",
      "name": "What is the Frequenz SDK for?",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "A development kit to interact with the Frequenz development platform."
      }
    },
    {
      "@type": "Question",
      "name": "How do I install the SDK?",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Installation:\n- pip install frequenz-sdk"
      }
    },
    {
      "@type": "Question",
      "name": "Show me an example of how to use it.",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "import asyncio\nfrom datetime import timedelta\nfrom frequenz.sdk import microgrid\nfrom frequenz.sdk.actor import ResamplerConfig\n\nasync def run() -> None:\n    server_url = \"grpc://microgrid.sandbox.api.frequenz.io:62060\"\n    await microgrid.initialize(\n        server_url,\n        ResamplerConfig(resampling_period=timedelta(seconds=1)),\n    )\n    grid_power_rx = microgrid.grid().power.new_receiver()\n    async for point in grid_power_rx:\n        print(point.value)\n\nif __name__ == \"__main__\":\n    asyncio.run(run())"
      }
    },
    {
      "@type": "Question",
      "name": "What features does it have?",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Key features:\n- Actor-model based orchestration with frequenz.channels\n- Component pools for batteries, PV, and EV chargers\n- Time-series streaming and resampling utilities\n- gRPC-based microgrid connectivity and sandbox support"
      }
    },
    {
      "@type": "Question",
      "name": "What license is it under?",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "License: https://opensource.org/licenses/MIT"
      }
    },
    {
      "@type": "Question",
      "name": "Which Python versions does it require?",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Requirements:\n- Python 3.11\n- Python 3.12"
      }
    }
  ]
}
